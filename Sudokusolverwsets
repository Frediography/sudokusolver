#########################################################################################
#########################################################################################
b = [0, 3, 6, 27, 30, 33, 54, 57, 60] # this is the block starting points
debug = 1 # Debug for printing! (Thanks Dom)
n = range(1,10) # Set the range of numbers we are looking for (1 - 9)
note = [] # empty list to note the places that we find blanks
possibles = set()
notpossibles = set()
# First - Import the puzzle as a list.
puzzle = list("000079065000003002005060093340050106000000000608020059950010600700600000820390000")
x = 0 # Define a variable that we can use to count iterations throughout
print("You have imported the following puzzle:           The positions on the board will be referred to as:")
while x <= (9*9)-1: # This just tells it when to stop looping
    y = x + 9 # created y as a counter
    print(str(x/9) + ": " +str(puzzle[x:y]) + "     " + str(range(x,y))) # The actual print command
    x += 9 # Go to the next line
print("- " * 100)

x = 0 # reset our counters
y = 0 # reset our counters

# Variable Definition & initial print of puzzle complete
#########################################################################################
#########################################################################################
# Below is where all the functions lie, that will actually be doing the work:

def findblanks(): # Find the blanks in the suduko puzzle
    x = 0
    if note == []:
        # Then; ask the user what the blanks are represented as, and make it a variable:
        b = "0" # Use the following for input: input("What are the blank spaces represented as in this puzzle? ")
        # Let's find the blanks and put all possible integers in, before starting to look at other numbers
        while x <= (9*9)-1: # same loop as earlier
            if b in puzzle[x]: # if the character for a blank is in that piece:
                del puzzle[x]  # delete that piece
                puzzle.insert(x, range(1,10)) # then insert the range of numbers it could be (1 - 9)
                note.append(x)
                x += 1 # add 1 to x to continue the loop
            else:
                x += 1 # else, skip that space and move to the next one
        if debug == 1:
            print("Blanks are at the following locations, and under variable 'note': ")
            print(note)
            print("- " * 100)

def checkrow(r): # Function to find the numbers that could be on each blank on the horizontal (based just on that line)
    l = r * 9 # make the function look at the start of the row
    x = 0 # define a variable for the counter
    h = l + 9 # define a variable for the Higher of the range
    y = 1
    while x <= 8: # to make sure we stay on one horizontal line
        if str(y) not in puzzle[l:h]: # if the number isn't in the line, it's a possible
            possibles.add(int(n[x]))
            x += 1
            y += 1
        else: # if the number is in the line, it's not a possible.
            notpossibles.add(n[x])
            x += 1 # so just move on to the next one
            y += 1
    if debug == 1:
        print("the following numbers are not possibles for this row: " + str(notpossibles))
        print("the possibilities for this row, based just on this row, are: " + str(possibles))
    return(possibles)

def checkcolumn(c): # This is to look through all columns and see what the possibilities are
    notpossibles = set() # create a not - possibles variable
    possibles = set() # empty the possibles variable
    for c in range (c, 81, 9): # this is the loop to ensure we only look at the verticals together
        for x in range(1, 10, 1): # this loop is each integer we are looking for on the vertical
            if str(x) in puzzle[c]: # if the x is in the puzzle at the point (c) we are looking at
                if debug == 2:
                    print(str(x) + " is in the puzzle at point: " + str(c))
                notpossibles.add(x) # add the number that is in the column to the not possibles
    if debug == 2:
        print("The following numbers are on column " + str(c-72) + ": " + str(notpossibles))
    for x in range(1, 10, 1): # loop to add possibles
        if x not in notpossibles: # if the number isn't in the not-possibles
            possibles.add(x) # add the number to the possibles variable
    if debug == 1 or 2:
        print("The possibles for this column are: " + str(possibles))
    if debug == 1 or 2:
        print("- " * 100)
    return(possibles)

def checkblock(block): # Function to check the possibilities within a block
    b = [0, 3, 6, 27, 30, 33, 54, 57, 60] # this is the block starting points
    x = b[block] # this is the variable for the start of the block
    c = 0 # this is the index of the puzzle compared to c
    i = 0 # this is just to run through each block
    notpossibles = set() # create a not - possibles variable
    possibles = set() # empty the possibles variable
    for x in range (x, x + 19, 9): # This is a single block, where x is the starting point
        for c in range (0, 3, 1): # This is to make sure it's just going through 3 places
            for h in range (1, 10, 1): # this is to check the range from 1 - 9
                if str(h) in puzzle[c + x]:
                    notpossibles.add(h)
                    if debug == 2:
                        print(str(h) + " is in the puzzle at point: " + str(c + x))
    if debug == 2:
        print("The following numbers are in this block: " + str(notpossibles))
    for x in range (1, 10, 1):
        if x not in notpossibles: # if the number isn't in the not-possibles
            possibles.add(x) # add the number to the possibles variable
    if debug == 1:
        print("The following numbers are possibles for this block: " + str(possibles))
        print("- " * 100)
    return(possibles)

def checkallrows(): # Function to look through all rows and see what the possibilities are
    for r in range(0, 81, 9):
        possibles = []
        notpossibles = []
        if debug == 1:
            if r == 0:
                print("looking at row number 0")
            else:
                print("Looking at row number " + str(r/9))
        l = r # make the function look at the start of the row
        x = 0 # define a variable for the counter
        h = l + 9 # define a variable for the Higher of the range
        y = 1
        while x <= 8: # to make sure we stay on one horizontal line
            if str(y) not in puzzle[l:h]: # if the number isn't in the line, it's a possible
                possibles.append(n[x])
                x += 1
                y += 1
            else: # if the number is in the line, it's not a possible.
                notpossibles.append(n[x])
                x += 1 # so just move on to the next one
                y += 1
        if debug == 1:
            print("the following numbers are not possibles for this row: " + str(notpossibles))
            print("the possibilities for this row, based just on this row, are: " + str(possibles))

def checkallcolumns(): # This is to look through all columns and see what the possibilities are
    c = 0 # this is a variable for the column number
    notpossibles = [] # create a not - possibles variable
    possibles = [] # empty the possibles variable
    for c in range (0, 9, 1): # create a loop to do this 9 times over
        notpossibles = [] # clear out the not possibles variable for the following loop
        possibles = [] # clear out the possibles variable for the following loop
        if debug == 1:
            print("MOVE TO COLUMN: " + str(c))
        for c in range (c, 81, 9): # this is the loop to ensure we only look at the verticals together
            for x in range(1, 10, 1): # this loop is each integer we are looking for on the vertical
                if str(x) in puzzle[c]: # if the x is in the puzzle at the point (c) we are looking at
                    if debug == 1:
                        print(str(x) + " is in the puzzle at point: " + str(c))
                    notpossibles.append(x) # add the number that is in the column to the not possibles
        if debug == 1:
            print("The following numbers are on column " + str(c-72) + ": " + str(notpossibles))
        for x in range(1, 10, 1): # loop to add possibles
            if x not in notpossibles: # if the number isn't in the not-possibles
                possibles.append(x) # add the number to the possibles variable
                    #
                    #
                    #
                    # This is where we add the logic to narrow down the numbers
                    #
                    #
                    #

        if debug == 1:
            print("Leaving the following numbers as possibles: " + str(possibles))
        if debug == 1:
            print("- " * 100)

def checkallblocks(): # This is to look through all blocks and see what the possibiities are
    b = [0, 3, 6, 27, 30, 33, 54, 57, 60] # this is the block starting points
    x = 0 # this is the variable for the start of the block
    c = 0 # this is the index of the puzzle compared to c
    i = 0 # this is just to run through each block
    notpossibles = [] # create a not - possibles variable
    possibles = [] # empty the possibles variable
    for i in range (0, 9, 1):
        x = b[i]
        if debug == 1:
            print("BLOCK START LOCATION: " + str(x))
        for x in range (x, x + 19, 9): # This is a single block, where x is the starting point
            for c in range (0, 3, 1): # This is to make sure it's just going through 3 places
                for h in range (1, 10, 1): # this is to check the range from 1 - 9
                    if str(h) in puzzle[c + x]:
                        notpossibles.append(h)
                        if debug == 1:
                            print(str(h) + " is in the puzzle at point: " + str(c + x))
        print("The following numbers are in this block: " + str(notpossibles))
        for x in range (1, 10, 1):
            if x not in notpossibles: # if the number isn't in the not-possibles
                possibles.append(x) # add the number to the possibles variable
        print("The following numbers are therefore possibles: " + str(possibles))
        notpossibles = []
        possibles = []
        print("- " * 100)

def findrow(x): # The function to find the row that a square (x) belongs to
    row = 0 # reset row to start loop
    for y in range(8, 81, 9): # y in range at the end of each row
        if x <= y: # if x is smaller than
            row = y/9
            break
    return(row)

def findcolumn(x): # The function to try and find the column that the square (x) is in
    x += 9 # Add 9 to the number of the square to avoid it being in the first row and hence not divisible by 9
    for y in range(0, 9, 1): # y in range at the end of each row
        if (x - y) % 9 == 0: # If the square number - y is divisible by 9, y is the column number
            if debug == 1:
                print("the column this square is in is number " + str(y))
            return(y) # return the column number
            break

def findblock(x): # the function to find the block a square (x) belongs to
    if x <= 2:
        print(str("0"))
    else:
        for i in range (0, 9, 1):
            y = b[i]
            if debug == 1:
                print("CHECKING BLOCK START LOCATION: " + str(y))
            for y in range (y, y + 19, 9): # This is a single block, where x is the starting point
                for c in range (0, 3, 1): # This is to make sure it's just going through 3 places
                    if y + c == x:
                        if debug == 1:
                            print(str(x) + " is in the puzzle at point: " + str(y + c) + " in block " + str(i) + " with start location " + str(b[i]))
                            return(i)
                            break

# All functions defined
#########################################################################################
#########################################################################################
# Execute functions
x = 0
print(checkrow(0))
